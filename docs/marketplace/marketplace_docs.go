// Package marketplace Code generated by swaggo/swag. DO NOT EDIT
package marketplace

import "github.com/swaggo/swag"

const docTemplatemarketplace = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/assets": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get user assets",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user assets",
                "responses": {
                    "200": {
                        "description": "user assets",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.UserAsset"
                            }
                        }
                    }
                }
            }
        },
        "/book": {
            "get": {
                "description": "Get order book by pair id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "book"
                ],
                "summary": "Get order book",
                "parameters": [
                    {
                        "type": "string",
                        "description": "pair_id",
                        "name": "pair_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "order book",
                        "schema": {
                            "$ref": "#/definitions/entity.OrderBook"
                        }
                    }
                }
            }
        },
        "/credentials": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get user credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user credentials",
                "responses": {
                    "200": {
                        "description": "user credentials",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.UserCredential"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create user credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create user credentials",
                "parameters": [
                    {
                        "description": "create user credential params",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UserCredential"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/eos/pay-cpu": {
            "post": {
                "description": "pay cpu for user tx",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "eos"
                ],
                "summary": "pay cpu",
                "parameters": [
                    {
                        "description": "signed tx",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.ReqPayCPU"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "txid",
                        "schema": {
                            "$ref": "#/definitions/entity.RespPayCPU"
                        }
                    }
                }
            }
        },
        "/klines": {
            "get": {
                "description": "Get kline data by pair id and interval",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "kline"
                ],
                "summary": "Get kline data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "pair_id",
                        "name": "pair_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "1m",
                            "5m",
                            "15m",
                            "30m",
                            "1h",
                            "4h",
                            "1d",
                            "1w",
                            "1M"
                        ],
                        "type": "string",
                        "description": "interval",
                        "name": "interval",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "start timestamp",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "end timestamp",
                        "name": "end",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "limit count",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "kline data",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Kline"
                            }
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "login params",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.ReqUserLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/orders": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get orders",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Get orders",
                "parameters": [
                    {
                        "type": "string",
                        "description": "pair_id",
                        "name": "pair_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order_type",
                        "name": "order_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "order list",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Order"
                            }
                        }
                    }
                }
            }
        },
        "/pairs": {
            "get": {
                "description": "Get all trading pairs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pair"
                ],
                "summary": "Get trading pairs",
                "responses": {
                    "200": {
                        "description": "pair list",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Pair"
                            }
                        }
                    }
                }
            }
        },
        "/pairs/{pair_id}": {
            "get": {
                "description": "Get trading pair detail by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pair"
                ],
                "summary": "Get trading pair detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "pair_id",
                        "name": "pair_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "pair detail",
                        "schema": {
                            "$ref": "#/definitions/entity.Pair"
                        }
                    }
                }
            }
        },
        "/tokens": {
            "get": {
                "description": "Get tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "token"
                ],
                "summary": "Get tokens",
                "responses": {
                    "200": {
                        "description": "token list",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Token"
                            }
                        }
                    }
                }
            }
        },
        "/trades": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get trades",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trade"
                ],
                "summary": "Get trades",
                "responses": {
                    "200": {
                        "description": "trade list",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Trade"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entity.Kline": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "close": {
                    "type": "number"
                },
                "count": {
                    "type": "integer"
                },
                "high": {
                    "type": "number"
                },
                "low": {
                    "type": "number"
                },
                "open": {
                    "type": "number"
                },
                "pair_id": {
                    "type": "string"
                },
                "quantity": {
                    "type": "number"
                },
                "symbol": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "entity.Order": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Order amount",
                    "type": "string"
                },
                "executed_amount": {
                    "description": "Executed amount",
                    "type": "string"
                },
                "executed_quantity": {
                    "description": "Executed quantity",
                    "type": "string"
                },
                "fee": {
                    "description": "Fee",
                    "type": "string"
                },
                "fee_asset": {
                    "description": "Fee asset",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_trade_time": {
                    "description": "Last trade time",
                    "type": "string"
                },
                "maker": {
                    "description": "Maker",
                    "type": "string"
                },
                "pair_id": {
                    "description": "Trading pair ID",
                    "type": "string"
                },
                "price": {
                    "description": "Order price",
                    "type": "string"
                },
                "quantity": {
                    "description": "Order quantity",
                    "type": "string"
                },
                "side": {
                    "description": "Order side",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.OrderSide"
                        }
                    ]
                },
                "status": {
                    "description": "Order status",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.OrderStatus"
                        }
                    ]
                },
                "timestamp": {
                    "description": "Order timestamp",
                    "type": "string"
                },
                "type": {
                    "description": "Order type",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.OrderType"
                        }
                    ]
                },
                "user": {
                    "description": "User",
                    "type": "string"
                }
            }
        },
        "entity.OrderBook": {
            "type": "object",
            "properties": {
                "asks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.OrderEntry"
                    }
                },
                "bids": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.OrderEntry"
                    }
                },
                "pair_id": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "entity.OrderEntry": {
            "type": "object",
            "properties": {
                "price": {
                    "type": "number"
                },
                "quantity": {
                    "type": "number"
                }
            }
        },
        "entity.OrderSide": {
            "type": "string",
            "enum": [
                "buy",
                "sell"
            ],
            "x-enum-varnames": [
                "OrderSideBuy",
                "OrderSideSell"
            ]
        },
        "entity.OrderStatus": {
            "type": "string",
            "enum": [
                "open",
                "filled",
                "partially_filled",
                "canceled"
            ],
            "x-enum-varnames": [
                "OrderStatusOpen",
                "OrderStatusFilled",
                "OrderStatusPartiallyFilled",
                "OrderStatusCanceled"
            ]
        },
        "entity.OrderType": {
            "type": "string",
            "enum": [
                "limit",
                "market"
            ],
            "x-enum-varnames": [
                "OrderTypeLimit",
                "OrderTypeMarket"
            ]
        },
        "entity.Pair": {
            "type": "object",
            "properties": {
                "base_contract": {
                    "type": "string"
                },
                "base_symbol": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "quote_contract": {
                    "type": "string"
                },
                "quote_symbol": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                }
            }
        },
        "entity.ReqPayCPU": {
            "type": "object",
            "required": [
                "single_signed_transaction"
            ],
            "properties": {
                "single_signed_transaction": {
                    "type": "string"
                }
            }
        },
        "entity.ReqUserLogin": {
            "type": "object",
            "properties": {
                "id_token": {
                    "type": "string"
                },
                "method": {
                    "description": "google,apple",
                    "type": "string"
                }
            }
        },
        "entity.RespPayCPU": {
            "type": "object",
            "properties": {
                "transaction_id": {
                    "type": "string"
                }
            }
        },
        "entity.Token": {
            "type": "object",
            "properties": {
                "change_24h": {
                    "type": "string"
                },
                "contract": {
                    "type": "string"
                },
                "decimals": {
                    "type": "integer"
                },
                "last_price": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                }
            }
        },
        "entity.Trade": {
            "type": "object",
            "properties": {
                "buyer": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "pair_id": {
                    "type": "integer"
                },
                "price": {
                    "type": "string"
                },
                "quantity": {
                    "type": "string"
                },
                "seller": {
                    "type": "string"
                },
                "side": {
                    "$ref": "#/definitions/entity.TradeSide"
                },
                "traded_at": {
                    "type": "string"
                }
            }
        },
        "entity.TradeSide": {
            "type": "string",
            "enum": [
                "buy",
                "sell"
            ],
            "x-enum-varnames": [
                "TradeSideBuy",
                "TradeSideSell"
            ]
        },
        "entity.UserAsset": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "string"
                },
                "free": {
                    "type": "string"
                },
                "locked": {
                    "type": "string"
                },
                "token_id": {
                    "type": "string"
                }
            }
        },
        "entity.UserCredential": {
            "type": "object",
            "properties": {
                "credential_id": {
                    "type": "string"
                },
                "public_key": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfomarketplace holds exported Swagger Info so clients can modify it
var SwaggerInfomarketplace = &swag.Spec{
	Version:          "1.0",
	Host:             "127.0.0.1:8080",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "exapp-go marketplace api",
	Description:      "",
	InfoInstanceName: "marketplace",
	SwaggerTemplate:  docTemplatemarketplace,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfomarketplace.InstanceName(), SwaggerInfomarketplace)
}
